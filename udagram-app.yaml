## Udagram application layer
Parameters:
  EnvName: 
    Type: String
    Default: udagram-app
  Infra:
    Type: String
    Default: udagram-infra
  VpcCidr: 
    Type: String
    Default: 10.0.0.0/16
  PubSub1Cidr: 
    Type: String
    Default: 10.0.1.0/24
  PubSub2Cidr: 
    Type: String
    Default: 10.0.2.0/24
  PriSub1Cidr: 
    Type: String
    Default: 10.0.3.0/24
  PriSub2Cidr: 
    Type: String
    Default: 10.0.4.0/24
  ImageId:
    Type: String
    Default: ami-09a56048b08f94cdf
  InstanceType:
    Type: String
    Default: t2.medium
  MaxSize:
    Type: String
    Default: 8
  MinSize:
    Type: String
    Default: 1
  DesiredCapacity:
    Type: String
    Default: 4
  HomeIp: 
    Type: String

Resources:  
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion security group allowing access to WebApp Servers
      VpcId: 
        Fn::ImportValue:
          !Sub ${Infra}-VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub ${HomeIp}
  
  Bastion:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: deyaa-Think
      SubnetId: 
        Fn::ImportValue:
          !Sub ${Infra}-PubSub1
      SecurityGroupIds:
      - !Ref BastionSG

  WebAppSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Web Application security group allowing 80,443 
      VpcId: 
        Fn::ImportValue:
          !Sub ${Infra}-VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16     
      SecurityGroupEgress :
      - IpProtocol: tcp   
        FromPort: 0  
        ToPort: 65535 
        CidrIp: 0.0.0.0/0 
  
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group allowing 80,443
      VpcId: 
        Fn::ImportValue:
          !Sub ${Infra}-VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress :
      - IpProtocol: tcp   
        FromPort: 0  
        ToPort: 65535 
        CidrIp: 0.0.0.0/0 
  LC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          apt-get install unzip awscli -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service          
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip      
      ImageId: !Ref ImageId
      #KeyName: deyaa-Think
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
      - Ref: WebAppSg
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdb"
        Ebs:
          VolumeSize: '10'
        
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - 
        Fn::ImportValue:
          !Sub ${Infra}-PubSub1
      - 
        Fn::ImportValue:
          !Sub ${Infra}-PriSub2
      Cooldown: 180
      HealthCheckGracePeriod: 0
      LaunchConfigurationName: !Ref LC
      Tags:
      - Key: Name
        Value: !Sub ${EnvName}-ASG
        PropagateAtLaunch: true
      TargetGroupARNs:
      - !Ref ALBTG
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredCapacity
      #MetricsCollection:
      #- Granularity: "1Minute"
      #  Metrics:
      #  - GroupInServiceInstances
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref ALBSG
      Subnets: 
        - Fn::ImportValue:
            !Sub ${Infra}-PubSub1
        - Fn::ImportValue:
            !Sub ${Infra}-PubSub2
      Tags: 
        - Key: Name
          Value: !Sub ${EnvName}-ALB
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
      - Type: "forward"
        TargetGroupArn: !Ref ALBTG  
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1        

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub ${Infra}-VpcId
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 120
        - Key: stickiness.enabled
          Value: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvName}-TG

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: instanceS3profile
      Path: /
      Roles:
        - !Ref IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvName}-IamRole
      Description: Iam Role Allowing EC2 instance to use S3 bucket
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      MaxSessionDuration: 3600
  
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReadS3
      Roles: 
      - !Ref IamRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::udacity-demo-1/udacity.zip'
  ASP1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      EstimatedInstanceWarmup: 180
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60

Outputs:
  ALB:
    Value:  !Join [ "", [ 'http://', !GetAtt ALB.DNSName]]
    Export:
      Name: !Sub ${EnvName}-ALB